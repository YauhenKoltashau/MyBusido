{"version":3,"file":"static/js/377.057def25.chunk.js","mappings":"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","sources":["redux/dialogsReducer.ts","webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","components/common/FormControls/FormControls.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/components/common/FormControls/FormControl.module.css?c6f9"],"sourcesContent":["import {v1} from \"uuid\";\nimport {AppActionsType} from \"./redux-store\";\n\nexport type MessageType = {\n    id: string\n    message: string\n}\nexport type MessagesType = Array<MessageType>\nexport type DialogType = {\n    id: string\n    name: string\n}\nexport type DialogsType = Array<DialogType>\nexport type DialogsPageStateType = {\n    dialogs:DialogsType\n    messages:MessagesType\n\n}\nconst ADD_MESSAGE = 'dialogs/ADD-MESSAGE'\n\nexport const addMessageAC = (newMessage: string) => ({type: ADD_MESSAGE, newMessage} as const)\nlet initialState:DialogsPageStateType = {\n        dialogs: [\n            {id: v1(), name: \"Yauhen\"},\n            {id: v1(), name: \"Irina\"},\n            {id: v1(), name: \"Sergey\"},\n            {id: v1(), name: \"Pavel\"},\n            {id: v1(), name: \"Rolan\"},\n            {id: v1(), name: \"Roman\"},\n            {id: v1(), name: \"Igor\"},\n            {id: v1(), name: \"Rustam\"}\n        ],\n        messages: [\n            {id: v1(), message: \"Hi, man!\"},\n            {id: v1(), message: \"How is your progress?\"},\n            {id: v1(), message: \"Anyone be able to become a programmer\"},\n        ]\n    }\nexport type DialogsReducerActionTypes = ReturnType<typeof addMessageAC>\nexport const dialogsReducer = (state:DialogsPageStateType=initialState, action: AppActionsType):DialogsPageStateType => {\n    switch (action.type) {\n        case ADD_MESSAGE:\n            const newMessageUser = {id: v1(), message: action.newMessage}\n            return {...state,messages: [...state.messages,newMessageUser]}\n        default:\n            return state\n    }\n\n}","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__oe96H\",\"dialogItems\":\"Dialogs_dialogItems__VFpmc\",\"messages\":\"Dialogs_messages__Cg2l+\",\"message\":\"Dialogs_message__ZEWo0\",\"dialog\":\"Dialogs_dialog__htSTl\",\"dialogActive\":\"Dialogs_dialogActive__i07K-\"};","import {NavLink} from 'react-router-dom';\nimport classes from './../Dialogs.module.css';\nimport React from \"react\";\nimport {DialogType} from \"../../../redux/dialogsReducer\";\n\n\ntype dialogsType = DialogType\n\nexport const DialogItem: React.FC<dialogsType> = (props) => {\n    let path = \"/dialogs/\" + props.id\n    return (\n        <div className={classes.dialog}>\n            <NavLink to={path} activeClassName={classes.dialogActive}>{props.name}</NavLink>\n        </div>\n    )\n}\n","import classes from './../Dialogs.module.css';\nimport React from \"react\";\nimport {MessageType} from \"../../../redux/dialogsReducer\";\n\ntype MessagePropsType = {\n    id: string\n    message: string\n}\n\n\n\nexport const Message: React.FC<MessageType> = (props:MessagePropsType) => {\n    return (\n        <div className={classes.message}>{props.message}</div>\n    )\n}\n","import classes from './Dialogs.module.css';\nimport React from \"react\";\nimport {DialogItem} from \"./DialogItem/DialogsItem\";\nimport {Message} from \"./Message/Message\";\nimport {DialogsPropsType} from \"./DialogsContainer\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Texarea} from \"../common/FormControls/FormControls\";\nimport {maxLengthCreator, minLengthCreator, required} from \"../../utils/validators/validators\";\n\nexport const Dialogs = (props: DialogsPropsType) => {\n    const onSubmit = (formData: FormDataType) => {\n        props.addMessage(formData.newMessage)\n        console.log(formData)\n    }\n\n    let dialogsElement = props.dialogs.map((d) =>\n        <DialogItem key={d.id} name={d.name} id={d.id}/>\n    )\n    let messagesItem = props.messages.map((m) =>\n        <Message key={m.id} id={m.id} message={m.message}/>)\n    return (\n        <div className={classes.dialogs}>\n            <div className={classes.dialogItems}>\n                {dialogsElement}\n            </div>\n\n            <div className={classes.messages}>\n                {messagesItem}\n                <MessageReduxForm onSubmit={onSubmit}/>\n            </div>\n        </div>\n    )\n}\ntype FormDataType = {\n    newMessage: string\n}\nconst maxLength100 = maxLengthCreator(100)\nconst minLength1 = minLengthCreator(1)\nconst MessageForm:React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder={\"Enter your message\"} name={\"newMessage\"} component={Texarea} validate={[required, maxLength100, minLength1]}/>\n            </div>\n            <div>\n                <button>Add</button>\n            </div>\n        </form>\n\n    )\n}\nconst MessageReduxForm = reduxForm<FormDataType>({form: \"addMessage\"})(MessageForm)","import React from \"react\";\nimport {addMessageAC, DialogsType, MessagesType} from \"../../redux/dialogsReducer\";\nimport {Dialogs} from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {compose, Dispatch} from \"redux\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\n\ntype mapStateToPropsType = {\n    dialogs: DialogsType\n    messages: MessagesType\n}\ntype mapDispatchToPropsType = {\n    addMessage: (newMessage: string) => void\n}\nexport type DialogsPropsType = mapStateToPropsType & mapDispatchToPropsType\nlet mapStateToProps = (state:AppStateType):mapStateToPropsType => {\n    return {\n        dialogs: state.dialogPage.dialogs,\n        messages: state.dialogPage.messages,\n    }\n}\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\n    return {\n        addMessage: (newMessage: string) => {\n            dispatch(addMessageAC(newMessage))\n        }\n    }\n}\n\n// export default compose(connect(mapStateToProps, mapDispatchToProps),withAuthRedirect)(Dialogs)\n\nexport const DialogsContainer =  compose<React.ComponentType>(connect(mapStateToProps, mapDispatchToProps),withAuthRedirect)(Dialogs)\n// the same\n// let AuthRedirectComponent = withAuthRedirect(Dialogs)\n// export const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent)\n\nexport default DialogsContainer","import React from \"react\";\nimport styles from \"./FormControl.module.css\"\n\nconst FormControl = ({...props}) => {\n   const hasError = props.meta.touched && props.meta.error\n    return (\n        <div className={styles.formControl + \" \" + (hasError ? styles.error: '')} >\n            <div>\n                {props.children}\n            </div>\n            <div>\n                {hasError && <span className={styles.error}>{props.meta.error}</span>}\n            </div>\n\n        </div>\n    )\n}\nexport const Texarea = ({...props}) => {\n    return (\n       <FormControl{...props}><textarea {...props.input} {...props}/></FormControl>\n    )\n}\nexport const Input = ({...props}) => {\n    return (\n            <FormControl {...props}>\n                <input {...props.input} {...props}/>\n            </FormControl>\n\n    )\n}","import React from 'react'\n\nexport const required = (value:boolean) => {\n   if (value) return undefined;\n   return  'Field is required'\n}\nexport const maxLengthCreator = (maxLength:number) => (value:string) => {\n   if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\n   return  undefined\n}\nexport const minLengthCreator = (minLength:number) => (value:string) => {\n   if (value && value.length < minLength) return `Min length is ${minLength} symbols`;\n   return  undefined\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControl_formControl__Bo16d\",\"error\":\"FormControl_error__7odTm\"};"],"names":["ADD_MESSAGE","v1","DialogItem","props","path","id","className","classes","to","activeClassName","name","Message","message","maxLength100","maxLengthCreator","minLength1","minLengthCreator","MessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Texarea","validate","required","DialogsContainer","compose","connect","state","dialogs","dialogPage","messages","dispatch","addMessage","newMessage","type","addMessageAC","withAuthRedirect","dialogsElement","map","d","messagesItem","m","formData","console","log","FormControl","hasError","meta","touched","error","styles","children","input","Input","value","maxLength","length","minLength"],"sourceRoot":""}