{"version":3,"file":"static/js/146.601b2e7b.chunk.js","mappings":"2RACA,EAA0B,yB,SCGbA,EAAU,SAAC,GAAmE,IAAlEC,EAAiE,EAAjEA,IAAIC,EAA6D,EAA7DA,aACzB,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKC,IAAKJ,EAAKK,IAAI,aACnB,mBAAQC,QAASL,EAAjB,yB,wCC6BCM,GAAiBC,EAAAA,EAAAA,GAAgC,CAACC,KAAM,SAAvCD,EAnB+C,SAAC,GAAiD,IAAhDE,EAA+C,EAA/CA,aAAcC,EAAiC,EAAjCA,MAAOC,EAA0B,EAA1BA,WAAeC,GAAW,YAC1H,OACI,kBAAMC,SAAUJ,EAAhB,WACKK,EAAAA,EAAAA,IAAY,QAAS,QAAS,CAACC,EAAAA,IAAWC,EAAAA,KAC1CF,EAAAA,EAAAA,IAAY,WAAY,WAAY,CAACC,EAAAA,IAAWC,EAAAA,GAAM,CAACC,KAAM,cAC7DH,EAAAA,EAAAA,SAAYI,EAAW,aAAc,GAAIF,EAAAA,GAAO,CAACC,KAAM,aACvDN,IAAc,SAACb,EAAD,CAASC,IAAKY,EAAYX,aAAcY,EAAMZ,eAC5DW,IAAcG,EAAAA,EAAAA,IAAY,qBAAsB,UAAW,CAACC,EAAAA,IAAWC,EAAAA,IACvEN,IAAO,gBAAKT,UAAWC,EAAAA,EAAAA,MAAhB,SAA+BQ,KACvC,0BACI,8CAmDhB,GAAeS,EAAAA,EAAAA,KANS,SAACC,GAAD,MAA8C,CAClET,WAAYS,EAAMC,KAAKV,WACvBW,OAAOF,EAAMC,KAAKC,UAImB,CAACC,WAAAA,EAAAA,GAAYC,mBAAAA,EAAAA,IAAtD,EAzCc,SAACZ,GAIX,GAAIA,EAAMU,OACN,OAAO,SAAC,KAAD,CAAUG,GAAI,aAMzB,OACI,+BACI,4BACI,mCACA,SAACnB,EAAD,CAAgBO,SAdX,SAACa,GACdd,EAAMW,WAAWG,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,UAatCnB,WAAYC,EAAMD,WAAYX,aARzD,WACjBY,EAAMY,iC,2JCzCRO,EAAc,SAAC,GAAgB,IAAZnB,EAAW,oBAC3BoB,EAAWpB,EAAMqB,KAAKC,SAAWtB,EAAMqB,KAAKvB,MACjD,OACI,iBAAKT,UAAWC,EAAAA,EAAAA,YAAqB,KAAO8B,EAAW9B,EAAAA,EAAAA,MAAc,IAArE,WACI,yBACKU,EAAMuB,YAEX,yBACKH,IAAY,iBAAM/B,UAAWC,EAAAA,EAAAA,MAAjB,SAAgCU,EAAMqB,KAAKvB,cAM3D0B,EAAU,SAAC,GAAgB,IAAZxB,EAAW,oBACnC,OACG,SAACmB,GAAD,kBAAgBnB,GAAhB,cAAuB,uCAAcA,EAAMyB,OAAWzB,QAGhDI,EAAQ,SAAC,GAAgB,IAAZJ,EAAW,oBACjC,OACQ,SAACmB,GAAD,kBAAiBnB,GAAjB,cACI,oCAAWA,EAAMyB,OAAWzB,QAK/BE,EAAc,SAACwB,EAA+BC,EAAcC,EAAiDC,GAA/F,IAAoH7B,EAApH,uDAA0H,GAA1H,OACvB,0BACI,SAAC,KAAD,QACI0B,YAAaA,EACbC,KAAMA,EACNG,SAAUF,EACVC,UAAWA,GACP7B,Q,sGCrCT,IAAMG,EAAW,SAAC4B,GACtB,IAAIA,EACJ,MAAQ,qBAEEC,EAAmB,SAACC,GAAD,OAAsB,SAACF,GACpD,GAAIA,GAASA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,cAG7BE,EAAmB,SAACC,GAAD,OAAsB,SAACL,GACpD,GAAIA,GAASA,EAAMG,OAASE,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,e,mBCV1C,KAAgB,YAAc,iCAAiC,MAAQ","sources":["webpack://samurai-way/./src/components/Captcha/Captcha.module.scss?b096","components/Captcha/Captcha.tsx","components/Login/Login.tsx","components/common/FormControls/FormControls.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/components/common/FormControls/FormControl.module.css?c6f9"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"captcha\":\"Captcha_captcha__MvQjl\"};","import React from \"react\";\nimport styles from \"./Captcha.module.scss\"\nimport refresh from \"../../assets/refresh.svg\"\n\nexport const Captcha = ({url,refreshImage}: { url: string, refreshImage?:() => void }) => {\n    return (\n        <div className={styles.captcha}>\n            <img src={url} alt=\"loading\"/>\n            <button onClick={refreshImage} >REFRESH</button>\n        </div>\n    )\n\n}","import React from 'react'\nimport { InjectedFormProps, reduxForm} from \"redux-form\";\nimport {connect} from \"react-redux\";\nimport {getCaptchaUrlThunk, logInThunk} from \"../../redux/Auth-reducer\";\nimport {createField, Input} from \"../common/FormControls/FormControls\";\nimport {required} from \"../../utils/validators/validators\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {Redirect} from \"react-router-dom\";\nimport styles from \"../common/FormControls/FormControl.module.css\"\nimport {Captcha} from \"../Captcha/Captcha\";\n\n\ntype FormDataType = {\n    login: string\n    password: string\n    rememberMe: boolean\n    captcha: string\n}\nconst LoginForm:React.FC<InjectedFormProps<FormDataType, IProps> & IProps> = ({handleSubmit, error, captchaUrl, ...props}) => {\n    return(\n        <form onSubmit={handleSubmit}>\n            {createField(\"Login\", \"login\", [required], Input)}\n            {createField(\"Password\", \"password\", [required], Input,{type: \"password\"})}\n            {createField(undefined, \"rememberMe\", [], Input, {type: \"checkbox\"})}\n            {captchaUrl && <Captcha url={captchaUrl} refreshImage={props.refreshImage}/>}\n            {captchaUrl && createField(\"Symbols from image\", \"captcha\", [required], Input)}\n            {error&&<div className={styles.error}>{error}</div>}\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    )\n}\ninterface IProps {\n    captchaUrl: string | null;\n    refreshImage:() => void\n}\nexport const LoginReduxForm = reduxForm<FormDataType, IProps>({form: 'login'})(LoginForm)\nconst Login = (props: LoginPropsType) => {\n    const onSubmit = (formData: FormDataType) => {\n        props.logInThunk(formData.login, formData.password, formData.rememberMe, formData.captcha)\n    }\n    if (props.isAuth){\n        return <Redirect to={'/profile'}/>\n    }\n    const refreshImage = () => {\n        props.getCaptchaUrlThunk()\n    }\n\n    return (\n        <>\n            <div>\n                <h1>LOGIN</h1>\n                <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl} refreshImage={refreshImage}/>\n            </div>\n        </>\n\n\n    )\n}\n\n\nexport type LoginPropsType = mapStateToPropsType & mapDispatchToPropsType\ntype mapDispatchToPropsType = {\n    logInThunk: (login: string, password: string, rememberMe: boolean, captcha: string) => void\n    getCaptchaUrlThunk: () => void\n\n}\ntype mapStateToPropsType = {\n    isAuth: boolean\n    captchaUrl: string | null\n}\n\nconst mapStateToProps = (state: AppStateType):mapStateToPropsType => ({\n    captchaUrl: state.auth.captchaUrl,\n    isAuth:state.auth.isAuth\n})\n\n// export default  connect (mapStateToProps, {loginThunk})(Login)\nexport default connect (mapStateToProps, {logInThunk, getCaptchaUrlThunk})(Login)","import React from \"react\";\nimport styles from \"./FormControl.module.css\"\nimport {Field} from \"redux-form\";\nimport {Validator} from \"redux-form/lib/Field\";\n\nconst FormControl = ({...props}) => {\n   const hasError = props.meta.touched && props.meta.error\n    return (\n        <div className={styles.formControl + \" \" + (hasError ? styles.error: '')} >\n            <div>\n                {props.children}\n            </div>\n            <div>\n                {hasError && <span className={styles.error}>{props.meta.error}</span>}\n            </div>\n\n        </div>\n    )\n}\nexport const Texarea = ({...props}) => {\n    return (\n       <FormControl{...props}><textarea {...props.input} {...props}/></FormControl>\n    )\n}\nexport const Input = ({...props}) => {\n    return (\n            <FormControl {...props}>\n                <input {...props.input} {...props}/>\n            </FormControl>\n\n    )\n}\nexport const createField = (placeholder: string|undefined, name: string, validators: Validator | Validator[] | undefined, component: React.FC, props={}, text=\"\") => (\n    <div>\n        <Field\n            placeholder={placeholder}\n            name={name}\n            validate={validators}\n            component={component}\n            {...props}\n        />\n    </div>\n)","import React from 'react'\n\nexport const required = (value:boolean) => {\n   if (value) return undefined;\n   return  'Field is required'\n}\nexport const maxLengthCreator = (maxLength:number) => (value:string) => {\n   if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\n   return  undefined\n}\nexport const minLengthCreator = (minLength:number) => (value:string) => {\n   if (value && value.length < minLength) return `Min length is ${minLength} symbols`;\n   return  undefined\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControl_formControl__Bo16d\",\"error\":\"FormControl_error__7odTm\"};"],"names":["Captcha","url","refreshImage","className","styles","src","alt","onClick","LoginReduxForm","reduxForm","form","handleSubmit","error","captchaUrl","props","onSubmit","createField","required","Input","type","undefined","connect","state","auth","isAuth","logInThunk","getCaptchaUrlThunk","to","formData","login","password","rememberMe","captcha","FormControl","hasError","meta","touched","children","Texarea","input","placeholder","name","validators","component","validate","value","maxLengthCreator","maxLength","length","minLengthCreator","minLength"],"sourceRoot":""}